export function rgbaToThumbHash(b, c, d) { if (100 < b || 100 < c) throw new Error(`${b}x${c} doesn't fit in 100x100`); let { PI: e, round: g, max: h, cos: i, abs: j } = Math, k = 0, m = 0, n = 0, o = 0; for (let a, e = 0, f = 0; e < b * c; e++, f += 4)a = d[f + 3] / 255, k += a / 255 * d[f], m += a / 255 * d[f + 1], n += a / 255 * d[f + 2], o += a; o && (k /= o, m /= o, n /= o); let r = o < b * c, s = r ? 5 : 7, t = h(1, g(s * b / h(b, c))), f = h(1, g(s * c / h(b, c))), u = [], l = [], p = [], q = []; for (let a = 0, e = 0; a < b * c; a++, e += 4) { let c = d[e + 3] / 255, f = k * (1 - c) + c / 255 * d[e], h = m * (1 - c) + c / 255 * d[e + 1], g = n * (1 - c) + c / 255 * d[e + 2]; u[a] = (f + h + g) / 3, l[a] = (f + h) / 2 - g, p[a] = f - h, q[a] = c } let a = (a, d, g) => { let k = 0, l = [], m = 0, n = []; for (let o = 0; o < g; o++)for (let p, f = 0; f * g < d * (g - o); f++) { p = 0; for (let a = 0; a < b; a++)n[a] = i(e / b * f * (a + .5)); for (let d = 0; d < c; d++)for (let f = 0, g = i(e / c * o * (d + .5)); f < b; f++)p += a[f + d * b] * n[f] * g; p /= b * c, f || o ? (l.push(p), m = h(m, j(p))) : k = p } if (m) for (let a = 0; a < l.length; a++)l[a] = .5 + .5 / m * l[a]; return [k, l, m] }, [v, w, x] = a(u, h(3, t), h(3, f)), [y, z, A] = a(l, 3, 3), [B, C, D] = a(p, 3, 3), [E, F, G] = r ? a(q, 5, 5) : [], H = b > c, I = g(63 * v) | g(31.5 + 31.5 * y) << 6 | g(31.5 + 31.5 * B) << 12 | g(31 * x) << 18 | r << 23, J = (H ? f : t) | g(63 * A) << 3 | g(63 * D) << 9 | H << 15, K = [255 & I, 255 & I >> 8, I >> 16, 255 & J, J >> 8], L = r ? 6 : 5, M = 0; r && K.push(g(15 * E) | g(15 * G) << 4); for (let a of r ? [w, z, C, F] : [w, z, C]) for (let b of a) K[L + (M >> 1)] |= g(15 * b) << ((1 & M++) << 2); return new Uint8Array(K) } export function thumbHashToRGBA(a) { let { PI: b, min: c, max: d, cos: e, round: f } = Math, j = a[0] | a[1] << 8 | a[2] << 16, k = a[3] | a[4] << 8, m = j >> 23, n = k >> 15, o = d(3, n ? m ? 5 : 7 : 7 & k), g = d(3, n ? 7 & k : m ? 5 : 7), s = m ? (15 & a[5]) / 15 : 1, t = (a[5] >> 4) / 15, u = m ? 6 : 5, v = 0, x = (b, c, d) => { let e = []; for (let f = 0; f < c; f++)for (let g = f ? 0 : 1; g * c < b * (c - f); g++)e.push(((15 & a[u + (v >> 1)] >> ((1 & v++) << 2)) / 7.5 - 1) * d); return e }, y = x(o, g, (31 & j >> 18) / 31), z = x(3, 3, 1.25 * ((63 & k >> 3) / 63)), A = x(3, 3, 1.25 * ((63 & k >> 9) / 63)), B = m && x(5, 5, t), C = thumbHashToApproximateAspectRatio(a), D = f(1 < C ? 32 : 32 * C), l = f(1 < C ? 32 / C : 32), h = new Uint8Array(4 * (D * l)), i = [], p = []; for (let f = 0, k = 0; f < l; f++)for (let a = 0; a < D; a++, k += 4) { let n = (63 & j) / 63, t = (63 & j >> 6) / 31.5 - 1, u = (63 & j >> 12) / 31.5 - 1, q = s; for (let c = 0, f = d(o, m ? 5 : 3); c < f; c++)i[c] = e(b / D * (a + .5) * c); for (let a = 0, c = d(g, m ? 5 : 3); a < c; a++)p[a] = e(b / l * (f + .5) * a); for (let a = 0, b = 0; a < g; a++)for (let c = a ? 0 : 1, d = 2 * p[a]; c * g < o * (g - a); c++, b++)n += y[b] * i[c] * d; for (let a = 0, b = 0; 3 > a; a++)for (let c, d = a ? 0 : 1, e = 2 * p[a]; d < 3 - a; d++, b++)c = i[d] * e, t += z[b] * c, u += A[b] * c; if (m) for (let a = 0, b = 0; 5 > a; a++)for (let c = a ? 0 : 1, d = 2 * p[a]; c < 5 - a; c++, b++)q += B[b] * i[c] * d; let v = n - 2 / 3 * t, w = (3 * n - v + u) / 2, r = w - u; h[k] = d(0, 255 * c(1, w)), h[k + 1] = d(0, 255 * c(1, r)), h[k + 2] = d(0, 255 * c(1, v)), h[k + 3] = d(0, 255 * c(1, q)) } return { w: D, h: l, rgba: h } } export function thumbHashToAverageRGBA(c) { let { min: d, max: e } = Math, f = c[0] | c[1] << 8 | c[2] << 16, g = (63 & f) / 63, h = (63 & f >> 12) / 31.5 - 1, i = f >> 23 ? (15 & c[5]) / 15 : 1, a = g - 2 / 3 * ((63 & f >> 6) / 31.5 - 1), b = (3 * g - a + h) / 2; return { r: e(0, d(1, b)), g: e(0, d(1, b - h)), b: e(0, d(1, a)), a: i } } export function thumbHashToApproximateAspectRatio(a) { let b = a[3], c = 128 & a[2], d = 128 & a[4], e = d ? c ? 5 : 7 : 7 & b, f = d ? 7 & b : c ? 5 : 7; return e / f } export function rgbaToDataURL(c, d, e) { let f = 4 * c + 1, g = 6 + d * (5 + f), h = [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, c >> 8, 255 & c, 0, 0, d >> 8, 255 & d, 8, 6, 0, 0, 0, 0, 0, 0, 0, g >>> 24, 255 & g >> 16, 255 & g >> 8, 255 & g, 73, 68, 65, 84, 120, 1], j = [0, 498536548, 997073096, 651767980, 1994146192, 1802195444, 1303535960, 1342533948, -306674912, -267414716, -690576408, -882789492, -1687895376, -2032938284, -1609899400, -1111625188], k = 1, l = 0; for (let a = 0, b = 0, g = f - 1; a < d; a++, g += f - 1)for (h.push(a + 1 < d ? 0 : 1, 255 & f, f >> 8, 255 & ~f, 255 ^ f >> 8, 0), l = (l + k) % 65521; b < g; b++) { let a = 255 & e[b]; h.push(a), k = (k + a) % 65521, l = (l + k) % 65521 } h.push(l >> 8, 255 & l, k >> 8, 255 & k, 0, 0, 0, 0, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130); for (let [a, b] of [[12, 29], [37, 41 + g]]) { let d = -1; for (let c = a; c < b; c++)d ^= h[c], d = d >>> 4 ^ j[15 & d], d = d >>> 4 ^ j[15 & d]; d = ~d, h[b++] = d >>> 24, h[b++] = 255 & d >> 16, h[b++] = 255 & d >> 8, h[b++] = 255 & d } return "data:image/png;base64," + btoa(String.fromCharCode(...h)) } export function thumbHashToDataURL(a) { let b = thumbHashToRGBA(a); return rgbaToDataURL(b.w, b.h, b.rgba) }
let allThumbs = document.querySelectorAll("[data-thumbhash]"), allThumbImages = document.querySelectorAll("[data-thumbhashimg]"); allThumbs.forEach(a => { let b = a.getAttribute("data-thumbhash"); if (null !== b) { let c = thumbHashToDataURL(Uint8Array.from(atob(b), a => a.charCodeAt(0))); a.src = c } }), allThumbImages.forEach(a => { let b = a.getAttribute("data-thumbhashimg"); null !== b && (a.src = b) }), allThumbs.forEach(a => { let b = a.getAttribute("data-thumbhash"); if (null !== b) { let b = a.getAttribute("data-thumbhashsrc"); null !== b && a.addEventListener("load", () => { setTimeout(() => a.src = b, 0) }, { once: !0 }) } }), allThumbImages.forEach(a => { let b = a.getAttribute("data-thumbhashimg"); if (null !== b) { let b = a.getAttribute("data-thumbhashsrc"); null !== b && a.addEventListener("load", () => { setTimeout(() => a.src = b, 0) }, { once: !0 }) } });